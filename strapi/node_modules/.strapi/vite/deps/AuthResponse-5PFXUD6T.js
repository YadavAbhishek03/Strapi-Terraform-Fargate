import {
  Page
} from "./chunk-DZWWGN2G.js";
import {
  login
} from "./chunk-QD7SV7IM.js";
import {
  useTypedDispatch
} from "./chunk-NRSPAQOV.js";
import "./chunk-BHLYCXQ7.js";
import "./chunk-BLJUR3JO.js";
import "./chunk-NYFUDXA7.js";
import {
  getCookieValue
} from "./chunk-ONU6FZDC.js";
import "./chunk-M342HWFU.js";
import "./chunk-CE4VABH2.js";
import "./chunk-5VODLFKF.js";
import {
  useIntl
} from "./chunk-JFW3EZ2W.js";
import {
  useMatch,
  useNavigate
} from "./chunk-TUXTO2Z5.js";
import "./chunk-FOD4ENRR.js";
import "./chunk-ZBEKWUZ2.js";
import {
  require_jsx_runtime
} from "./chunk-NIAJZ5MX.js";
import "./chunk-4EQMEDYW.js";
import {
  require_react
} from "./chunk-MADUDGYZ.js";
import {
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@strapi/admin/dist/admin/ee/admin/src/pages/AuthResponse.mjs
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var React = __toESM(require_react(), 1);
var AuthResponse = () => {
  const match = useMatch("/auth/login/:authResponse");
  const { formatMessage } = useIntl();
  const navigate = useNavigate();
  const dispatch = useTypedDispatch();
  const redirectToOops = React.useCallback(() => {
    navigate({
      pathname: "/auth/oops",
      search: `?info=${encodeURIComponent(formatMessage({
        id: "Auth.form.button.login.providers.error",
        defaultMessage: "We cannot connect you through the selected provider."
      }))}`
    });
  }, [
    navigate,
    formatMessage
  ]);
  React.useEffect(() => {
    if ((match == null ? void 0 : match.params.authResponse) === "error") {
      redirectToOops();
    }
    if ((match == null ? void 0 : match.params.authResponse) === "success") {
      const jwtToken = getCookieValue("jwtToken");
      if (jwtToken) {
        dispatch(login({
          token: jwtToken
        }));
        navigate("/auth/login");
      } else {
        redirectToOops();
      }
    }
  }, [
    dispatch,
    match,
    redirectToOops,
    navigate
  ]);
  return (0, import_jsx_runtime.jsx)(Page.Loading, {});
};
export {
  AuthResponse
};
//# sourceMappingURL=AuthResponse-5PFXUD6T.js.map
